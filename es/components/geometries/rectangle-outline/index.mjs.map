{"version":3,"file":"index.mjs","sources":["../../../../../../packages/components/geometries/rectangle-outline/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-09-16 09:28:13\n * @LastEditTime: 2022-03-30 11:46:34\n * @LastEditors: zouyaoji\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\geometries\\rectangle-outline\\index.ts\n */\nimport { VcComponentInternalInstance, VcComponentPublicInstance, VcReadyObject, VcRectangle } from '@vue-cesium/utils/types'\nimport { defineComponent, getCurrentInstance, createCommentVNode } from 'vue'\nimport { useGeometries } from '@vue-cesium/composables'\nimport { kebabCase } from '@vue-cesium/utils/util'\nimport { rectangle, ellipsoid, granularity, height, rotation, extrudedHeight } from '@vue-cesium/utils/cesium-props'\nimport { commonEmits } from '@vue-cesium/utils/emits'\nexport const rectangleOutlineGeometryProps = {\n  ...rectangle,\n  ...ellipsoid,\n  ...granularity,\n  ...height,\n  ...rotation,\n  ...extrudedHeight\n}\nexport default defineComponent({\n  name: 'VcGeometryRectangleOutline',\n  props: rectangleOutlineGeometryProps,\n  emits: commonEmits,\n  setup(props, ctx) {\n    // state\n    const instance = getCurrentInstance() as VcComponentInternalInstance\n    instance.cesiumClass = 'RectangleOutlineGeometry'\n    useGeometries(props, ctx, instance)\n\n    return () => createCommentVNode(kebabCase(instance.proxy?.$options.name || 'v-if'))\n  }\n})\n\nexport type VcGeometryRectangleOutlineProps = {\n  /**\n   * A cartographic rectangle with north, south, east and west properties in radians.\n   */\n  rectangle: VcRectangle\n  /**\n   * The ellipsoid on which the rectangle lies.\n   */\n  ellipsoid?: Cesium.Ellipsoid\n  /**\n   * The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n   */\n  granularity?: number\n  /**\n   * The distance in meters between the rectangle and the ellipsoid surface.\n   */\n  height?: number\n  /**\n   * The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\n   * Default value: 0.0\n   */\n  rotation?: number\n  /**\n   * The distance in meters between the rectangle's extruded face and the ellipsoid surface.\n   */\n  extrudedHeight: number\n  /**\n   * Triggers before the VcGeometryRectangleOutline is loaded\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcGeometryRectangleOutline is successfully loaded\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the VcGeometryRectangleOutline is destroyed\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n}\n\nexport type VcGeometryRectangleOutlineRef = VcComponentPublicInstance<VcGeometryRectangleOutlineProps>\n"],"names":[],"mappings":";;;;;;;AAKY,MAAC,6BAA6B,GAAG;AAC7C,EAAE,GAAG,SAAS;AACd,EAAE,GAAG,SAAS;AACd,EAAE,GAAG,WAAW;AAChB,EAAE,GAAG,MAAM;AACX,EAAE,GAAG,QAAQ;AACb,EAAE,GAAG,cAAc;AACnB,EAAE;AACF,+BAAe,eAAe,CAAC;AAC/B,EAAE,IAAI,EAAE,4BAA4B;AACpC,EAAE,KAAK,EAAE,6BAA6B;AACtC,EAAE,KAAK,EAAE,WAAW;AACpB,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;AACpB,IAAI,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;AAC1C,IAAI,QAAQ,CAAC,WAAW,GAAG,0BAA0B,CAAC;AACtD,IAAI,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AACxC,IAAI,OAAO,MAAM;AACjB,MAAM,IAAI,EAAE,CAAC;AACb,MAAM,OAAO,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;AAClH,KAAK,CAAC;AACN,GAAG;AACH,CAAC,CAAC;;;;"}