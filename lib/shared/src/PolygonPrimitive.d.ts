declare class PolygonPrimitive {
    show: boolean;
    _id: string;
    _positions: Array<Cesium.Cartesian3>;
    _boundingSphere: Cesium.BoundingSphere;
    _primitive: Cesium.Primitive | Cesium.GroundPrimitive | undefined;
    _update: boolean;
    _ellipsoid: Cesium.Ellipsoid;
    _clampToGround: boolean;
    _classificationType: number;
    _allowPicking: boolean;
    _asynchronous: boolean;
    _polygonHierarchy: Cesium.PolygonHierarchy;
    _appearance: Cesium.Appearance;
    _depthFailAppearance: Cesium.Appearance;
    constructor(options: any);
    get positions(): Cesium.Cartesian3[];
    set positions(val: Cesium.Cartesian3[]);
    get polygonHierarchy(): Cesium.PolygonHierarchy;
    set polygonHierarchy(val: Cesium.PolygonHierarchy);
    get appearance(): Cesium.Appearance;
    set appearance(val: Cesium.Appearance);
    get depthFailAppearance(): Cesium.Appearance;
    set depthFailAppearance(val: Cesium.Appearance);
    get id(): string;
    set id(id: string);
    get boundingVolume(): Cesium.BoundingSphere;
    get ellipsoid(): Cesium.Ellipsoid;
    get clampToGround(): boolean;
    set clampToGround(val: boolean);
    get classificationType(): number;
    set classificationType(e: number);
    get allowPicking(): boolean;
    set allowPicking(val: boolean);
    get asynchronous(): boolean;
    set asynchronous(val: boolean);
    update(frameState: any): Promise<void>;
    _createPolygon(): Promise<Cesium.Primitive>;
    _createGroundPolygon(): Promise<Cesium.GroundPrimitive>;
    isDestroyed(): boolean;
    destroy(): void;
}
export default PolygonPrimitive;
