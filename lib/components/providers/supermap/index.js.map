{"version":3,"file":"index.js","sources":["../../../../../../packages/components/providers/supermap/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-09-16 09:28:13\n * @LastEditTime: 2022-04-08 13:44:46\n * @LastEditors: zouyaoji\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\providers\\supermap\\index.ts\n */\nimport type { PropType } from 'vue'\nimport { createCommentVNode, defineComponent, getCurrentInstance } from 'vue'\nimport type { ProjectionTransforms, VcComponentInternalInstance, VcComponentPublicInstance, VcReadyObject } from '@vue-cesium/utils/types'\nimport { useProviders } from '@vue-cesium/composables'\nimport { minimumLevel, maximumLevel, projectionTransforms } from '@vue-cesium/utils/cesium-props'\nimport SuperMapImageryProvider from './SuperMapImageryProvider'\nimport { kebabCase } from '@vue-cesium/utils/util'\nimport { providerEmits } from '@vue-cesium/utils/emits'\n\nexport const supermapImageryProviderProps = {\n  url: String,\n  ...minimumLevel,\n  ...maximumLevel,\n  name: String,\n  transparent: {\n    type: Boolean,\n    default: true\n  },\n  credit: {\n    type: [String, Object] as PropType<string | Cesium.Credit>,\n    default: 'MapQuest, SuperMap iServer Imagery'\n  },\n  ...projectionTransforms\n}\nexport default defineComponent({\n  name: 'VcImageryProviderSupermap',\n  props: supermapImageryProviderProps,\n  emits: providerEmits,\n  setup(props, ctx) {\n    // state\n    const instance = getCurrentInstance() as VcComponentInternalInstance\n    instance.cesiumClass = 'SuperMapImageryProvider'\n    const providersState = useProviders(props, ctx, instance)\n\n    if (undefined === providersState) {\n      return\n    }\n    // methods\n    instance.createCesiumObject = async () => {\n      Cesium.SuperMapImageryProvider = Cesium.SuperMapImageryProvider || SuperMapImageryProvider\n      if (providersState.unwatchFns.length === 0) {\n        providersState.setPropsWatcher(true)\n      }\n      const options = providersState.transformProps(props)\n      return new Cesium.SuperMapImageryProvider(options)\n    }\n    return () => createCommentVNode(kebabCase(instance.proxy?.$options.name || ''))\n  }\n})\n\nexport type VcImageryProviderSupermapProps = {\n  /**\n   * The URL of the SuperMap iServer service.\n   */\n  url: string\n  /**\n   * The name of the layer.\n   */\n  name?: string\n  /**\n   * The minimum tile level to request, or undefined if there is no minimum.\n   * Default value: 0\n   */\n  minimumLevel?: number\n  /**\n   * The maximum tile level to request, or undefined if there is no maximum.\n   * Default value: 20\n   */\n  maximumLevel?: number\n  /**\n   * Whether the parameter of the requested map service is transparent.\n   * Default value: true\n   */\n  transparent?: boolean\n  /**\n   * A credit for the data source, which is displayed on the canvas.\n   * Default value: 'MapQuest, SuperMap iServer Imagery'\n   */\n  credit?: string | Cesium.Credit\n  /**\n   * Specify the projection transformation parameters. such as { from: 'BD09', to: 'WGS84' }\n   */\n  projectionTransforms?: ProjectionTransforms\n  /**\n   * Triggers before the VcImageryProviderSupermap is loaded.\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcImageryProviderSupermap is successfully loaded.\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the VcImageryProviderSupermap is destroyed.\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the imagery provider encounters an asynchronous error.\n   */\n  onErrorEvent?: (evt: Cesium.TileProviderError) => void\n  /**\n   * Triggers when the provider is ready for use.\n   */\n  onReadyPromise?: (evt: boolean, viewer: Cesium.Viewer, instance: VcComponentPublicInstance) => void\n}\n\nexport type VcImageryProviderSupermapRef = VcComponentPublicInstance<VcImageryProviderSupermapProps>\n"],"names":["minimumLevel","maximumLevel","projectionTransforms","defineComponent","providerEmits","getCurrentInstance","useProviders","SuperMapImageryProvider","createCommentVNode","kebabCase"],"mappings":";;;;;;;;;;;;AAMY,MAAC,4BAA4B,GAAG;AAC5C,EAAE,GAAG,EAAE,MAAM;AACb,EAAE,GAAGA,wBAAY;AACjB,EAAE,GAAGC,wBAAY;AACjB,EAAE,IAAI,EAAE,MAAM;AACd,EAAE,WAAW,EAAE;AACf,IAAI,IAAI,EAAE,OAAO;AACjB,IAAI,OAAO,EAAE,IAAI;AACjB,GAAG;AACH,EAAE,MAAM,EAAE;AACV,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;AAC1B,IAAI,OAAO,EAAE,oCAAoC;AACjD,GAAG;AACH,EAAE,GAAGC,gCAAoB;AACzB,EAAE;AACF,8BAAeC,mBAAe,CAAC;AAC/B,EAAE,IAAI,EAAE,2BAA2B;AACnC,EAAE,KAAK,EAAE,4BAA4B;AACrC,EAAE,KAAK,EAAEC,mBAAa;AACtB,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;AACpB,IAAI,MAAM,QAAQ,GAAGC,sBAAkB,EAAE,CAAC;AAC1C,IAAI,QAAQ,CAAC,WAAW,GAAG,yBAAyB,CAAC;AACrD,IAAI,MAAM,cAAc,GAAGC,gBAAY,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC9D,IAAI,IAAI,cAAc,KAAK,KAAK,CAAC,EAAE;AACnC,MAAM,OAAO;AACb,KAAK;AACL,IAAI,QAAQ,CAAC,kBAAkB,GAAG,YAAY;AAC9C,MAAM,MAAM,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,IAAIC,kCAAuB,CAAC;AACjG,MAAM,IAAI,cAAc,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AAClD,QAAQ,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC7C,OAAO;AACP,MAAM,MAAM,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAC3D,MAAM,OAAO,IAAI,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;AACzD,KAAK,CAAC;AACN,IAAI,OAAO,MAAM;AACjB,MAAM,IAAI,EAAE,CAAC;AACb,MAAM,OAAOC,sBAAkB,CAACC,cAAS,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;AAC9G,KAAK,CAAC;AACN,GAAG;AACH,CAAC,CAAC;;;;;"}