{"version":3,"file":"index.js","sources":["../../../../../../packages/components/geometries/circle/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-09-16 09:28:13\n * @LastEditTime: 2022-03-30 13:28:51\n * @LastEditors: zouyaoji\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\geometries\\circle\\index.ts\n */\nimport { VcComponentInternalInstance, VcComponentPublicInstance, VcPosition, VcReadyObject } from '@vue-cesium/utils/types'\nimport { defineComponent, getCurrentInstance, createCommentVNode } from 'vue'\nimport { useGeometries } from '@vue-cesium/composables'\nimport { kebabCase } from '@vue-cesium/utils/util'\nimport { center, radius, ellipsoid, height, granularity, vertexFormat, extrudedHeight, stRotation } from '@vue-cesium/utils/cesium-props'\nimport { commonEmits } from '@vue-cesium/utils/emits'\nexport const circleGeometryProps = {\n  ...center,\n  ...radius,\n  ...ellipsoid,\n  ...height,\n  ...granularity,\n  ...vertexFormat,\n  ...extrudedHeight,\n  ...stRotation\n}\nexport default defineComponent({\n  name: 'VcGeometryCircle',\n  props: circleGeometryProps,\n  emits: commonEmits,\n  setup(props, ctx) {\n    // state\n    const instance = getCurrentInstance() as VcComponentInternalInstance\n    instance.cesiumClass = 'CircleGeometry'\n    useGeometries(props, ctx, instance)\n\n    return () => createCommentVNode(kebabCase(instance.proxy?.$options.name || 'v-if'))\n  }\n})\n\nexport type VcGeometryCircleProps = {\n  /**\n   * The circle's center point in the fixed frame.\n   */\n  center: VcPosition\n  /**\n   * The radius in meters.\n   */\n  radius?: number\n  /**\n   * The ellipsoid the circle will be on.\n   */\n  ellipsoid?: Cesium.Ellipsoid\n  /**\n   * The distance in meters between the circle and the ellipsoid surface.\n   */\n  height?: number\n  /**\n   * The angular distance between points on the circle in radians.\n   */\n  granularity?: number\n  /**\n   * The vertex attributes to be computed.\n   */\n  vertexFormat?: Cesium.VertexFormat\n  /**\n   * The distance in meters between the circle's extruded face and the ellipsoid surface.\n   */\n  extrudedHeight?: number\n  /**\n   * The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n   */\n  stRotation?: number\n  /**\n   * Triggers before the VcCircleGeometry is loaded.\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcCircleGeometry is successfully loaded.\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the VcCircleGeometry is destroyed.\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n}\n\nexport type VcGeometryCircleRef = VcComponentPublicInstance<VcGeometryCircleProps>\n"],"names":["center","radius","ellipsoid","height","granularity","vertexFormat","extrudedHeight","stRotation","defineComponent","commonEmits","getCurrentInstance","useGeometries","createCommentVNode","kebabCase"],"mappings":";;;;;;;;;;;AAKY,MAAC,mBAAmB,GAAG;AACnC,EAAE,GAAGA,kBAAM;AACX,EAAE,GAAGC,kBAAM;AACX,EAAE,GAAGC,qBAAS;AACd,EAAE,GAAGC,kBAAM;AACX,EAAE,GAAGC,uBAAW;AAChB,EAAE,GAAGC,wBAAY;AACjB,EAAE,GAAGC,0BAAc;AACnB,EAAE,GAAGC,sBAAU;AACf,EAAE;AACF,qBAAeC,mBAAe,CAAC;AAC/B,EAAE,IAAI,EAAE,kBAAkB;AAC1B,EAAE,KAAK,EAAE,mBAAmB;AAC5B,EAAE,KAAK,EAAEC,iBAAW;AACpB,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;AACpB,IAAI,MAAM,QAAQ,GAAGC,sBAAkB,EAAE,CAAC;AAC1C,IAAI,QAAQ,CAAC,WAAW,GAAG,gBAAgB,CAAC;AAC5C,IAAIC,gBAAa,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AACxC,IAAI,OAAO,MAAM;AACjB,MAAM,IAAI,EAAE,CAAC;AACb,MAAM,OAAOC,sBAAkB,CAACC,cAAS,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;AAClH,KAAK,CAAC;AACN,GAAG;AACH,CAAC,CAAC;;;;;"}