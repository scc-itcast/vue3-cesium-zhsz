{"version":3,"file":"PickedFeatures.js","sources":["../../../../../../packages/components/controls/selection-indicator/PickedFeatures.ts"],"sourcesContent":["class PickedFeatures {\n  allFeaturesAvailablePromise: any\n  isLoading: boolean\n  pickPosition: any\n  features: any[]\n  error: any\n  providerCoords: any\n  constructor() {\n    const { knockout } = Cesium\n    /**\n     * Gets or sets a promise that indicates, when it resolves, that all picked features are available in the\n     * {@see PickedFeatures#features} array.\n     * @type {Promise}\n     */\n    this.allFeaturesAvailablePromise = undefined\n\n    /**\n     * Gets or sets a value indicating whether the list of picked features is still loading.\n     * @type {Boolean}\n     */\n    this.isLoading = true\n\n    /**\n     * Gets or sets the ground position that was picked, if any.\n     * @type {Cartesian3}\n     */\n    this.pickPosition = undefined\n\n    /**\n     * Gets or sets the array of picked features.  The array is observable and may be updated up until the point that\n     * {@see PickedFeatures#allFeaturesAvailablePromise} resolves.\n     * @type {Entity[]}\n     */\n    this.features = []\n\n    /**\n     * Gets or sets a message describing an error that occurred while picking features.\n     * If this property is undefined, no error occurred.\n     * @type {String}\n     */\n    this.error = undefined\n\n    this.providerCoords = undefined\n\n    knockout.track(this, ['isLoading', 'features', 'error'])\n  }\n}\n\nexport default PickedFeatures\n"],"names":[],"mappings":";;;;AAAA,MAAM,cAAc,CAAC;AACrB,EAAE,WAAW,GAAG;AAChB,IAAI,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;AAChC,IAAI,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC,CAAC;AAC9C,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,IAAI,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;AACjC,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7D,GAAG;AACH;;;;"}